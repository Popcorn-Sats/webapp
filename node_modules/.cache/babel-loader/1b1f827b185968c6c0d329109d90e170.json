{"ast":null,"code":"const Server = {\n  transactions() {\n    return fetch(`http://localhost:2121/transactions`).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (jsonResponse) {\n        return jsonResponse.map(transaction => {\n          return {\n            id: transaction.id,\n            description: transaction.description,\n            category: transaction.category,\n            payee: transaction.payee,\n            block: transaction.block,\n            txid: transaction.txid,\n            balance_change: transaction.balance_change,\n            account: transaction.account,\n            address: transaction.address,\n            network_fee: transaction.network_fee,\n            size: transaction.size,\n            transactiontype: transaction.transactiontype,\n            transactionledgers: transaction.transactionledgers\n          };\n        });\n      }\n    });\n  },\n\n  editTransaction(data) {\n    console.log(data);\n    const jsonData = JSON.stringify(data);\n    return fetch(`http://localhost:2121/transactions`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: jsonData\n    }).then(response => response.json()).then(data => {\n      console.log('Success:', data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  },\n\n  accounts() {\n    return fetch(`http://localhost:2121/accounts`).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (jsonResponse) {\n        return jsonResponse.map(account => {\n          return {\n            id: account.id,\n            name: account.name,\n            notes: account.notes,\n            birthday: account.birthday,\n            accounttype: account.accounttype,\n            xpub: account.xpub\n          };\n        });\n      }\n    });\n  },\n\n  newAccount(data) {\n    return fetch('http://localhost:2121/accounts/add', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: data\n    }).then(response => response.json()).then(data => {\n      console.log('Success:', data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  },\n\n  editAccount(data) {\n    console.log(data);\n    const jsonData = JSON.stringify(data);\n    return fetch(`http://localhost:2121/accounts`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: jsonData\n    }).then(response => response.json()).then(data => {\n      console.log('Success:', data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  },\n\n  // TODO\n  deleteAccount(data) {\n    return fetch(`http://localhost:2121/accounts/delete?id=$data.props.id`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: data\n    }).then(response => response.json()).then(data => {\n      console.log('Success:', data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  },\n\n  /* \n  --------------------\n  Categories API calls\n  --------------------\n  */\n  categories() {\n    return fetch(`http://localhost:2121/categories`).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (jsonResponse) {\n        return jsonResponse.map(category => {\n          return {\n            id: category.id,\n            name: category.name\n          };\n        });\n      }\n    });\n  },\n\n  newCategory(data) {\n    return fetch('http://localhost:2121/accounts/add', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: data\n    }).then(response => response.json()).then(data => {\n      console.log('Success:', data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  },\n\n  editCategory(data) {\n    console.log(data);\n    const jsonData = JSON.stringify(data);\n    return fetch(`http://localhost:2121/accounts`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: jsonData\n    }).then(response => response.json()).then(data => {\n      console.log('Success:', data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  },\n\n  // TODO\n  deleteCategory(data) {\n    return fetch(`http://localhost:2121/accounts/delete?id=$data.props.id`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: data\n    }).then(response => response.json()).then(data => {\n      console.log('Success:', data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  },\n\n  search(term) {\n    return fetch(`http://localhost:2121/search?term=${term}`).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (jsonResponse.transactions) {\n        return jsonResponse.transactions.map(transaction => {\n          return {\n            id: transaction.id,\n            description: transaction.description,\n            category: transaction.category,\n            payee: transaction.payee,\n            block_height: transaction.block_height,\n            txid: transaction.txid,\n            balance_change: transaction.balance_change,\n            account: transaction.account,\n            address: transaction.address,\n            fee: transaction.fee,\n            size: transaction.size\n          };\n        });\n      }\n    });\n  }\n\n};\nexport default Server;","map":{"version":3,"sources":["/Users/Zane/bitcoinprojects/luca/5_React/src/utils/server.js"],"names":["Server","transactions","fetch","then","response","json","jsonResponse","map","transaction","id","description","category","payee","block","txid","balance_change","account","address","network_fee","size","transactiontype","transactionledgers","editTransaction","data","console","log","jsonData","JSON","stringify","method","headers","body","catch","error","accounts","name","notes","birthday","accounttype","xpub","newAccount","editAccount","deleteAccount","categories","newCategory","editCategory","deleteCategory","search","term","block_height","fee"],"mappings":"AAAA,MAAMA,MAAM,GAAG;AACXC,EAAAA,YAAY,GAAG;AACX,WAAOC,KAAK,CACP,oCADO,CAAL,CAELC,IAFK,CAEAC,QAAQ,IAAI;AACf,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAJM,EAIJF,IAJI,CAICG,YAAY,IAAI;AACpB,UAAIA,YAAJ,EAAkB;AACd,eAAOA,YAAY,CAACC,GAAb,CAAiBC,WAAW,IAAI;AACnC,iBAAO;AACHC,YAAAA,EAAE,EAAED,WAAW,CAACC,EADb;AAEHC,YAAAA,WAAW,EAAEF,WAAW,CAACE,WAFtB;AAGHC,YAAAA,QAAQ,EAAEH,WAAW,CAACG,QAHnB;AAIHC,YAAAA,KAAK,EAAEJ,WAAW,CAACI,KAJhB;AAKHC,YAAAA,KAAK,EAAEL,WAAW,CAACK,KALhB;AAMHC,YAAAA,IAAI,EAAEN,WAAW,CAACM,IANf;AAOHC,YAAAA,cAAc,EAAEP,WAAW,CAACO,cAPzB;AAQHC,YAAAA,OAAO,EAAER,WAAW,CAACQ,OARlB;AASHC,YAAAA,OAAO,EAAET,WAAW,CAACS,OATlB;AAUHC,YAAAA,WAAW,EAAEV,WAAW,CAACU,WAVtB;AAWHC,YAAAA,IAAI,EAAEX,WAAW,CAACW,IAXf;AAYHC,YAAAA,eAAe,EAAEZ,WAAW,CAACY,eAZ1B;AAaHC,YAAAA,kBAAkB,EAAEb,WAAW,CAACa;AAb7B,WAAP;AAeH,SAhBM,CAAP;AAiBH;AACJ,KAxBM,CAAP;AAyBH,GA3BU;;AA4BXC,EAAAA,eAAe,CAACC,IAAD,EAAO;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,UAAMG,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAjB;AACA,WAAOrB,KAAK,CACP,oCADO,EAER;AACI2B,MAAAA,MAAM,EAAE,KADZ;AAEIC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFb;AAKIC,MAAAA,IAAI,EAAEL;AALV,KAFQ,CAAL,CASLvB,IATK,CASAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATZ,EAUNF,IAVM,CAUDoB,IAAI,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB;AACC,KAZM,EAaNS,KAbM,CAaCC,KAAD,IAAW;AAClBT,MAAAA,OAAO,CAACS,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACC,KAfM,CAAP;AAgBH,GA/CU;;AAgDXC,EAAAA,QAAQ,GAAG;AACP,WAAOhC,KAAK,CACP,gCADO,CAAL,CAELC,IAFK,CAEAC,QAAQ,IAAI;AACf,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAJM,EAIJF,IAJI,CAICG,YAAY,IAAI;AACpB,UAAIA,YAAJ,EAAkB;AACd,eAAOA,YAAY,CAACC,GAAb,CAAiBS,OAAO,IAAI;AAC/B,iBAAO;AACHP,YAAAA,EAAE,EAAEO,OAAO,CAACP,EADT;AAEH0B,YAAAA,IAAI,EAAEnB,OAAO,CAACmB,IAFX;AAGHC,YAAAA,KAAK,EAAEpB,OAAO,CAACoB,KAHZ;AAIHC,YAAAA,QAAQ,EAAErB,OAAO,CAACqB,QAJf;AAKHC,YAAAA,WAAW,EAAEtB,OAAO,CAACsB,WALlB;AAMHC,YAAAA,IAAI,EAAEvB,OAAO,CAACuB;AANX,WAAP;AAQH,SATM,CAAP;AAUH;AACJ,KAjBM,CAAP;AAkBH,GAnEU;;AAoEXC,EAAAA,UAAU,CAACjB,IAAD,EAAO;AACb,WAAOrB,KAAK,CACR,oCADQ,EAER;AACI2B,MAAAA,MAAM,EAAE,MADZ;AAEIC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFb;AAKIC,MAAAA,IAAI,EAAER;AALV,KAFQ,CAAL,CASLpB,IATK,CASAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATZ,EAUNF,IAVM,CAUDoB,IAAI,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB;AACC,KAZM,EAaNS,KAbM,CAaCC,KAAD,IAAW;AAClBT,MAAAA,OAAO,CAACS,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACC,KAfM,CAAP;AAgBH,GArFU;;AAsFXQ,EAAAA,WAAW,CAAClB,IAAD,EAAO;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,UAAMG,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAjB;AACA,WAAOrB,KAAK,CACP,gCADO,EAER;AACI2B,MAAAA,MAAM,EAAE,KADZ;AAEIC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFb;AAKIC,MAAAA,IAAI,EAAEL;AALV,KAFQ,CAAL,CASLvB,IATK,CASAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATZ,EAUNF,IAVM,CAUDoB,IAAI,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB;AACC,KAZM,EAaNS,KAbM,CAaCC,KAAD,IAAW;AAClBT,MAAAA,OAAO,CAACS,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACC,KAfM,CAAP;AAgBH,GAzGU;;AA0GX;AACAS,EAAAA,aAAa,CAACnB,IAAD,EAAO;AAChB,WAAOrB,KAAK,CACP,yDADO,EAER;AACI2B,MAAAA,MAAM,EAAE,MADZ;AAEIC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFb;AAKIC,MAAAA,IAAI,EAAER;AALV,KAFQ,CAAL,CASLpB,IATK,CASAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATZ,EAUNF,IAVM,CAUDoB,IAAI,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB;AACC,KAZM,EAaNS,KAbM,CAaCC,KAAD,IAAW;AAClBT,MAAAA,OAAO,CAACS,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACC,KAfM,CAAP;AAgBH,GA5HU;;AA6HX;;;;;AAKAU,EAAAA,UAAU,GAAG;AACT,WAAOzC,KAAK,CACP,kCADO,CAAL,CAELC,IAFK,CAEAC,QAAQ,IAAI;AACf,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAJM,EAIJF,IAJI,CAICG,YAAY,IAAI;AACpB,UAAIA,YAAJ,EAAkB;AACd,eAAOA,YAAY,CAACC,GAAb,CAAiBI,QAAQ,IAAI;AAChC,iBAAO;AACHF,YAAAA,EAAE,EAAEE,QAAQ,CAACF,EADV;AAEH0B,YAAAA,IAAI,EAAExB,QAAQ,CAACwB;AAFZ,WAAP;AAIH,SALM,CAAP;AAMH;AACJ,KAbM,CAAP;AAcH,GAjJU;;AAkJXS,EAAAA,WAAW,CAACrB,IAAD,EAAO;AACd,WAAOrB,KAAK,CACR,oCADQ,EAER;AACI2B,MAAAA,MAAM,EAAE,MADZ;AAEIC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFb;AAKIC,MAAAA,IAAI,EAAER;AALV,KAFQ,CAAL,CASLpB,IATK,CASAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATZ,EAUNF,IAVM,CAUDoB,IAAI,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB;AACC,KAZM,EAaNS,KAbM,CAaCC,KAAD,IAAW;AAClBT,MAAAA,OAAO,CAACS,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACC,KAfM,CAAP;AAgBH,GAnKU;;AAoKXY,EAAAA,YAAY,CAACtB,IAAD,EAAO;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,UAAMG,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAjB;AACA,WAAOrB,KAAK,CACP,gCADO,EAER;AACI2B,MAAAA,MAAM,EAAE,KADZ;AAEIC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFb;AAKIC,MAAAA,IAAI,EAAEL;AALV,KAFQ,CAAL,CASLvB,IATK,CASAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATZ,EAUNF,IAVM,CAUDoB,IAAI,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB;AACC,KAZM,EAaNS,KAbM,CAaCC,KAAD,IAAW;AAClBT,MAAAA,OAAO,CAACS,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACC,KAfM,CAAP;AAgBH,GAvLU;;AAwLX;AACAa,EAAAA,cAAc,CAACvB,IAAD,EAAO;AACjB,WAAOrB,KAAK,CACP,yDADO,EAER;AACI2B,MAAAA,MAAM,EAAE,MADZ;AAEIC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFb;AAKIC,MAAAA,IAAI,EAAER;AALV,KAFQ,CAAL,CASLpB,IATK,CASAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATZ,EAUNF,IAVM,CAUDoB,IAAI,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB;AACC,KAZM,EAaNS,KAbM,CAaCC,KAAD,IAAW;AAClBT,MAAAA,OAAO,CAACS,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACC,KAfM,CAAP;AAgBH,GA1MU;;AA2MXc,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT,WAAO9C,KAAK,CACP,qCAAoC8C,IAAK,EADlC,CAAL,CAEL7C,IAFK,CAEAC,QAAQ,IAAI;AACf,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAJM,EAIJF,IAJI,CAICG,YAAY,IAAI;AACpB,UAAIA,YAAY,CAACL,YAAjB,EAA+B;AAC3B,eAAOK,YAAY,CAACL,YAAb,CAA0BM,GAA1B,CAA8BC,WAAW,IAAI;AAChD,iBAAO;AACHC,YAAAA,EAAE,EAAED,WAAW,CAACC,EADb;AAEHC,YAAAA,WAAW,EAAEF,WAAW,CAACE,WAFtB;AAGHC,YAAAA,QAAQ,EAAEH,WAAW,CAACG,QAHnB;AAIHC,YAAAA,KAAK,EAAEJ,WAAW,CAACI,KAJhB;AAKHqC,YAAAA,YAAY,EAAEzC,WAAW,CAACyC,YALvB;AAMHnC,YAAAA,IAAI,EAAEN,WAAW,CAACM,IANf;AAOHC,YAAAA,cAAc,EAAEP,WAAW,CAACO,cAPzB;AAQHC,YAAAA,OAAO,EAAER,WAAW,CAACQ,OARlB;AASHC,YAAAA,OAAO,EAAET,WAAW,CAACS,OATlB;AAUHiC,YAAAA,GAAG,EAAE1C,WAAW,CAAC0C,GAVd;AAWH/B,YAAAA,IAAI,EAAEX,WAAW,CAACW;AAXf,WAAP;AAaH,SAdM,CAAP;AAeH;AACJ,KAtBM,CAAP;AAuBH;;AAnOU,CAAf;AAsOA,eAAenB,MAAf","sourcesContent":["const Server = {\n    transactions() {\n        return fetch(\n            `http://localhost:2121/transactions`\n        ).then(response => {\n            return response.json()\n        }).then(jsonResponse => {\n            if (jsonResponse) {\n                return jsonResponse.map(transaction => {\n                    return {\n                        id: transaction.id,\n                        description: transaction.description,\n                        category: transaction.category,\n                        payee: transaction.payee,\n                        block: transaction.block,\n                        txid: transaction.txid,\n                        balance_change: transaction.balance_change,\n                        account: transaction.account,\n                        address: transaction.address,\n                        network_fee: transaction.network_fee,\n                        size: transaction.size,\n                        transactiontype: transaction.transactiontype,\n                        transactionledgers: transaction.transactionledgers\n                    }\n                })\n            }\n        })\n    },\n    editTransaction(data) {\n        console.log(data)\n        const jsonData = JSON.stringify(data)\n        return fetch(\n            `http://localhost:2121/transactions`,\n            {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: jsonData,\n            }\n        ).then(response => response.json())\n        .then(data => {\n        console.log('Success:', data);\n        })\n        .catch((error) => {\n        console.error('Error:', error);\n        });\n    },\n    accounts() {\n        return fetch(\n            `http://localhost:2121/accounts`\n        ).then(response => {\n            return response.json()\n        }).then(jsonResponse => {\n            if (jsonResponse) {\n                return jsonResponse.map(account => {\n                    return {\n                        id: account.id,\n                        name: account.name,\n                        notes: account.notes,\n                        birthday: account.birthday,\n                        accounttype: account.accounttype,\n                        xpub: account.xpub\n                    }\n                })\n            }\n        })\n    },\n    newAccount(data) {\n        return fetch(\n            'http://localhost:2121/accounts/add', \n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: data,\n            }\n        ).then(response => response.json())\n        .then(data => {\n        console.log('Success:', data);\n        })\n        .catch((error) => {\n        console.error('Error:', error);\n        });\n    },\n    editAccount(data) {\n        console.log(data)\n        const jsonData = JSON.stringify(data)\n        return fetch(\n            `http://localhost:2121/accounts`,\n            {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: jsonData,\n            }\n        ).then(response => response.json())\n        .then(data => {\n        console.log('Success:', data);\n        })\n        .catch((error) => {\n        console.error('Error:', error);\n        });\n    },\n    // TODO\n    deleteAccount(data) {\n        return fetch(\n            `http://localhost:2121/accounts/delete?id=$data.props.id`,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: data,\n            }\n        ).then(response => response.json())\n        .then(data => {\n        console.log('Success:', data);\n        })\n        .catch((error) => {\n        console.error('Error:', error);\n        });\n    },\n    /* \n    --------------------\n    Categories API calls\n    --------------------\n    */\n    categories() {\n        return fetch(\n            `http://localhost:2121/categories`\n        ).then(response => {\n            return response.json()\n        }).then(jsonResponse => {\n            if (jsonResponse) {\n                return jsonResponse.map(category => {\n                    return {\n                        id: category.id,\n                        name: category.name\n                    }\n                })\n            }\n        })\n    },\n    newCategory(data) {\n        return fetch(\n            'http://localhost:2121/accounts/add', \n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: data,\n            }\n        ).then(response => response.json())\n        .then(data => {\n        console.log('Success:', data);\n        })\n        .catch((error) => {\n        console.error('Error:', error);\n        });\n    },\n    editCategory(data) {\n        console.log(data)\n        const jsonData = JSON.stringify(data)\n        return fetch(\n            `http://localhost:2121/accounts`,\n            {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: jsonData,\n            }\n        ).then(response => response.json())\n        .then(data => {\n        console.log('Success:', data);\n        })\n        .catch((error) => {\n        console.error('Error:', error);\n        });\n    },\n    // TODO\n    deleteCategory(data) {\n        return fetch(\n            `http://localhost:2121/accounts/delete?id=$data.props.id`,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: data,\n            }\n        ).then(response => response.json())\n        .then(data => {\n        console.log('Success:', data);\n        })\n        .catch((error) => {\n        console.error('Error:', error);\n        });\n    },\n    search(term) {\n        return fetch(\n            `http://localhost:2121/search?term=${term}`\n        ).then(response => {\n            return response.json()\n        }).then(jsonResponse => {\n            if (jsonResponse.transactions) {\n                return jsonResponse.transactions.map(transaction => {\n                    return {\n                        id: transaction.id,\n                        description: transaction.description,\n                        category: transaction.category,\n                        payee: transaction.payee,\n                        block_height: transaction.block_height,\n                        txid: transaction.txid,\n                        balance_change: transaction.balance_change,\n                        account: transaction.account,\n                        address: transaction.address,\n                        fee: transaction.fee,\n                        size: transaction.size\n                    }\n                })\n            }\n        })\n    }\n}\n\nexport default Server"]},"metadata":{},"sourceType":"module"}