{"ast":null,"code":"var _jsxFileName = \"/Users/Zane/bitcoinprojects/luca/5_React/src/pages/Dashboard.js\";\nimport React, { useState, useEffect } from 'react';\nimport ChartCard from '../components/Chart/ChartCard';\nimport { Doughnut, Line } from 'react-chartjs-2';\nimport ChartLegend from '../components/Chart/ChartLegend';\nimport PageTitle from '../components/Typography/PageTitle';\nimport { Transactions } from '../components/Transactions';\nimport BlockHeight from '../components/Dashboard/BlockHeight';\nimport AccountBalance from '../components/Dashboard/TotalBalance';\nimport New from '../components/Dashboard/New';\nimport Unconfirmed from '../components/Dashboard/Unconfirmed';\nimport { Charts } from '../components/Dashboard/Charts';\nimport Server from '../utils/server';\nimport { Pagination } from '@windmill/react-ui';\nimport { doughnutOptions, lineOptions, doughnutLegends, lineLegends } from '../utils/demo/chartsData';\nexport default class Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      transactions: []\n    }; //this.getTransactions = this.getTransactions.bind(this)\n  }\n\n  componentDidMount() {\n    Server.transactions().then(transactions => {\n      this.setState({\n        transactions: transactions\n      });\n    });\n  }\n  /*getTransactions() {\n    Server.transactions().then(transactions => {\n      this.setState({transactions: transactions})\n    })\n  }*/\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PageTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, \"Dashboard\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(BlockHeight, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(AccountBalance, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(New, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Unconfirmed, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Charts, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Transactions, {\n      transactions: this.state.transactions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n/*function Dashboard() {\n\n  // setup pages control for every table\n  const [page, setPage] = useState(1)\n  const [data, setData] = useState([])\n\n  // pagination setup\n  const resultsPerPage = 10\n  const totalResults = response.length\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p)\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n  useEffect(() => {\n    setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage))\n  }, [page])\n\n  return (\n    <>\n\n      <div className=\"grid gap-6 mb-8 md:grid-cols-2\">\n        <ChartCard title=\"Expense categories\">\n          <Doughnut {...doughnutOptions} />\n          <ChartLegend legends={doughnutLegends} />\n        </ChartCard>\n\n        <ChartCard title=\"Balance\">\n          <Line {...lineOptions} />\n          <ChartLegend legends={lineLegends} />\n        </ChartCard>\n      </div>\n\n      \n\n\n    </>\n  )\n}\n\nexport default Dashboard*/","map":{"version":3,"sources":["/Users/Zane/bitcoinprojects/luca/5_React/src/pages/Dashboard.js"],"names":["React","useState","useEffect","ChartCard","Doughnut","Line","ChartLegend","PageTitle","Transactions","BlockHeight","AccountBalance","New","Unconfirmed","Charts","Server","Pagination","doughnutOptions","lineOptions","doughnutLegends","lineLegends","Dashboard","Component","constructor","props","state","transactions","componentDidMount","then","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,SAASC,QAAT,EAAmBC,IAAnB,QAA+B,iBAA/B;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,OAAOC,GAAP,MAAgB,6BAAhB;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,SAASC,MAAT,QAAuB,gCAAvB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SACEC,UADF,QAEO,oBAFP;AAIA,SACEC,eADF,EAEEC,WAFF,EAGEC,eAHF,EAIEC,WAJF,QAKO,0BALP;AAOA,eAAe,MAAMC,SAAN,SAAwBpB,KAAK,CAACqB,SAA9B,CAAwC;AACrDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE;AADH,KAAb,CAFiB,CAKjB;AACD;;AACDC,EAAAA,iBAAiB,GAAG;AAClBZ,IAAAA,MAAM,CAACW,YAAP,GAAsBE,IAAtB,CAA2BF,YAAY,IAAI;AACzC,WAAKG,QAAL,CAAc;AAACH,QAAAA,YAAY,EAAEA;AAAf,OAAd;AACD,KAFD;AAGD;AACD;;;;;;;AAKAI,EAAAA,MAAM,GAAG;AACP,wBACE,uDAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,eAGE;AAAK,MAAA,SAAS,EAAC,+CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAIE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAHF,eASE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,eAUE,oBAAC,YAAD;AAAc,MAAA,YAAY,EAAE,KAAKL,KAAL,CAAWC,YAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADF;AAcD;;AAjCoD;AAoCvD","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport ChartCard from '../components/Chart/ChartCard'\nimport { Doughnut, Line } from 'react-chartjs-2'\nimport ChartLegend from '../components/Chart/ChartLegend'\nimport PageTitle from '../components/Typography/PageTitle'\nimport { Transactions } from '../components/Transactions'\nimport BlockHeight from '../components/Dashboard/BlockHeight'\nimport AccountBalance from '../components/Dashboard/TotalBalance'\nimport New from '../components/Dashboard/New'\nimport Unconfirmed from '../components/Dashboard/Unconfirmed'\nimport { Charts } from '../components/Dashboard/Charts'\nimport Server from '../utils/server'\nimport {\n  Pagination,\n} from '@windmill/react-ui'\n\nimport {\n  doughnutOptions,\n  lineOptions,\n  doughnutLegends,\n  lineLegends,\n} from '../utils/demo/chartsData'\n\nexport default class Dashboard extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      transactions: []\n    }\n    //this.getTransactions = this.getTransactions.bind(this)\n  }\n  componentDidMount() {\n    Server.transactions().then(transactions => {\n      this.setState({transactions: transactions})\n    })\n  }\n  /*getTransactions() {\n    Server.transactions().then(transactions => {\n      this.setState({transactions: transactions})\n    })\n  }*/\n  render() {\n    return (\n      <>\n        {/*<SearchBar searchYelp={this.searchYelp} />*/}\n        <PageTitle>Dashboard</PageTitle>\n        <div className=\"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-4\">\n          <BlockHeight />\n          <AccountBalance />\n          <New />\n          <Unconfirmed />\n        </div>\n        <Charts />\n        <Transactions transactions={this.state.transactions} /> \n      </>\n    );\n  }\n}\n\n/*function Dashboard() {\n\n  // setup pages control for every table\n  const [page, setPage] = useState(1)\n  const [data, setData] = useState([])\n\n  // pagination setup\n  const resultsPerPage = 10\n  const totalResults = response.length\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p)\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n  useEffect(() => {\n    setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage))\n  }, [page])\n\n  return (\n    <>\n\n      <div className=\"grid gap-6 mb-8 md:grid-cols-2\">\n        <ChartCard title=\"Expense categories\">\n          <Doughnut {...doughnutOptions} />\n          <ChartLegend legends={doughnutLegends} />\n        </ChartCard>\n\n        <ChartCard title=\"Balance\">\n          <Line {...lineOptions} />\n          <ChartLegend legends={lineLegends} />\n        </ChartCard>\n      </div>\n\n      \n\n\n    </>\n  )\n}\n\nexport default Dashboard*/\n"]},"metadata":{},"sourceType":"module"}